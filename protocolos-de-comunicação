tcp - 5 camadas
osi - 7 camadas

aplicação - interação do usuario com a maquina - dados
transporte - porta TCP/UDP - 
rede - IP
enlace - MAC
FISICA - sinais

segurança da informação

C - confidencialidade
I - integridade, modificar dados no meio do caminho
D - disponibilidade, informação tenque estar disponível
A - autenticidade, verifica quem o individuo é quem deve ser... principio do não repudio

politica de segurança - troca de senha
politica de backup - segurança do backup

certificado digital
-versao e numero de serie
-dados que identificam a ac(autoridade certificadora)
-dados que identificam o dono do certificado
-chave publica do dono od certificado
-validade do certificado
-assinatura digital da AC

--COMO FUNCIONA O PROTOCOLO HTTP

ARQUITETURA CLIENT0-SERVER
BROWSER - CLIENTE - REQUEST HTTP - OBJETOS WEB
SERVIDOR - RESPONSE HTTP- PROTOCOLO TCP

STATELESS - NÃO GUARDA O ESTADO SERVIDOR

COMUNICAÇÃO PERSISTENTE - CONFERE SE AS INFORMAÇÕES FORAM ENVIADAS E RECEBIDAS
COMUNICAÇÃO NÃO PERSISTENTE - NÃO CONFERE, MAIS VELOCIDADE 

METODOS:
GET - requisição do client de alguma informação do servidor
POST - enviou de informações para o servidor

FORMATOS DE INFORMAÇÃO XML, JASON - ARMAZENAMENTO, TRANSMISSÃO, RECONSTRUÇÃO (SERIALIZAÇÃO)

PARTICULARIDADES HTTP 1.1

TCP - Aperto de maõs 3 vias
REQUEST = texto ASC II
VERSÃO, URL, METODO HTTP, TIPO DE CONECÇÃO, AGENTE, PREFERENCIA DO CLIENTE (METODOS GET, POST)

METODO SEGURO - GET APENAS LEITURA

REPONSE
VERSÃO DO PROTOCOLO, REPOSTA

WebDav - utilizado por devs para trabalhar

Protocolo HTTP - STATELESS

COOKIES - TRAKEAR a informação do cliente - RFC 6265
HEADER FILE - onde as informações do coockie estão

1. request HTTP
2. ACESSO BACK-END
3. RESPONDE HEADER: SET-COOCKIE = ID - HISTÓRICO

2: TIPO
COOOCKIE DE SESSÃO - ACABA COM A SESSÃO
COOCKIE PERSISTENTES - MANTIDO NO COMPUTADOR - EX. LOGIN ATIVO

COOCKIES & PRIVACIDADE

HACKING - 
LGPD & COOCKIE - 

CACHE = PROXY SERVER
INTERMEDIARIO = VERIFICA A NECESSIDADE DE ATUALIZAÇÃO PARA AGILIZAR A COMUNICAÇÃO

HTTP 2.0

HOL-HEAD OF LINE BLOCKING - CONECÇÃO PIRNCIPAL PERSISTENTE - PRIORIZAÇÃO DE RECURSOS - SEGMENTAÇÃO STREAMING - REUTILIZAÇÃO DO HEADER

PUSH - ENVIA TUDO O QUE PRECISA, SEM PRECISAR DE REQUISIÇÃO DO CLIENTE - NÃO PE DEFAULT - CONSIGURAR NO  CLIENTE (ATENÇÃO!!!)

SERVIDORES HTTP - APACHE(MAIS UTILIZADO); XAMPP(INICIANDO); NGINX(+ NOVO)

APACHE - 1992
-Modular - só usa o que precisa
-dinamico
-garregavel
- escalavel
- tsl/ssl
-ipv6
-hhtp 2.0
-tanto LINUX e Windows

XAMPP
-Pacote, utiliza o APache
-MariaDB
-Interpretadores - PHP/Pearl
-módulos - windows ++linux e apple

-voltado para teste e desenvolvimento, s/ internet

NGINX

2004

CONCORRENTE DO APACHE

COMO OCORRE A COMUNICAÇÃO DO CLIENTE E SERVIDOR:

WIRESHARK - 

HTTPS

CONCEITOS DA SEGURANÇA DA INFORMAÇÃO

CRIPTOGRAFIA POR CHAVE & CERTIFICADO DIGITAL

CRIPTOGRAFAI DE CHAVE - SIMETRICA E ASSIMETRICA

ASIMETRICA - CHAVE PRIVA E PUBLICA - 
  CIFRA DE FLUXO - PERMUTAÇÃO DOS BITS
   CIFRA DE BLOCO - PERMUTAR BLOCO DE BITS (TABELA DE PERMUTAÇÃO)
    K> 64
    
    MAPEAMENTO POR FUNÇÃO -DES;AES; 3DES
    CERTIFICADO DIGITAL - CERTIFICAÇÃO DE CHAVE PÚBLICA - IPSEC; TSL; SSL
    ENTIDADE CERTIFICADORA - VERIFICAR QUEM É; EMISSÃO DO CERTIFICADO
    
SIMÉRICA - MESMA CHAVE - CIFRA DE CESAR 

SSL - SECURE SOCKET LAYER

PROTOCOLO DE SEGURANÇA A CIMA DO TCP

TLS - 3ª VERSÃO DO SSL

ATAQUE - 1º CENARIO - OUVINDO
        - 2 CENARIO - ATIVO - MODIFICAR INFORMAÇÃO DO CLIENTE PARA O SERVIDOR
        
        HTTPS - COIBI TAIS AÇÕES - 
        
        3 FASES
        
        HAND SHAKE - SIMILAR AO HTTP
        TCP START, TCP RESPONSE, TCP CONFIRMATION, SSL HELLO, CERTIFICATION (CHAVE PUBLICA) EMS - TUILIZADA PARA DESCRIPTOGRAFAR A MENSAGEM; 
        
        MASTER SECRET KEY
        CHAVE SIMÉTRICA - 
        
        DATA TRANSFER = RECORD + MAC (ASSINAFO PELA CHAVE DA SESSÃO)
        
        HTTPS = HTTP + SSL
        
        LGPD - LEI GERAL DA PROTEÇÃO DE DADOS
        
        ANPD - AGENCIA NACIONAL DA PROTEÇÃO DE DADOS
        
        PROTOCOLO DE COMUNICAÇÃO WEB SOCKET
        
        HTTP - MUITA INFORMAÇÃO TRAFEGANDO, DOIDERA (OVERHEAD)
        
        SOLUÇÃO PARA ESTE PROBLEMA - WEB SOCKET - UMA CONEÇÃO WEB SOCKET "API"
        
        WEBSOCKET(ENCAPSULADO NO HTTP) - API!!!
        
        UTILIZADO PARA APP COM ALTA ATUALIZAÇÃO DE INFORMAÇÕES
        
        COMO FUNCIONA O WEB SOCKET?
        
        DUAS FASES
        
        HAND SHAKE - 2 VIAS 
                      SYN
                     SYN ACK
                     
      DATA TRANFER - ORIGIN-BASE SECURITY
            JSON
            AUTENTICAÇÃO
            
     FECHAMENTO DE CONECÇÃO
              ENVIADO MENSAGEM DO SERVIDOR COM MESAGEM DE ENCERRAMENTO
              CLIENT RESPONDE
              
      COMO OCORRE A COMUNICAÇÃO NA INTERNET?
      
      -PROXY
      SE AS INFORMAÇÕES ESTÃO NO CACHE O PROXY ATUALIZA O CLIENTE
      OU 
      O PROXY ATUALIZA JUNTO AO SERVIDOR WEB ESTAS INFORMAÇÕES
      
      
      -HTTP server
      
      - DNS - DOMAIN NAME SYSTEM
      
      
      -SOCKET
      
      
      -LOAD BALANCER
      
          -DISTRIBUIÇÃO DE CARGA, ETRE OS SERVIDORES HTTP
           -MULTIPLEXIÇÃO, ORGANIZA AS INFORMAÇÕES PARA O CLIENTE
      
      
      
      1º CLIENT ENVIA PACOTE PARA DNS
      2ª CLIENT ENVIA REQUISIÇÃO COM SERVIDOR
      
      
      
3º SOCKET TCP - CONECÇÃO CAMADA DE TRANSPORTE, IDENTIFICAÇÃO IP E PORTA COM A CONEXAÕ

  







